import React, { createContext, useContext, useState, useEffect } from 'react';
import * as LocalStorage from '../services/localStorage';
import { useAuth } from './AuthContext';
import socketService from '../services/socketService';
import { useNavigation } from '@react-navigation/native';

// T·∫°o context cho notifications
const NotificationContext = createContext();

/**
 * Provider component cho notification context
 * Qu·∫£n l√Ω state v√† logic li√™n quan ƒë·∫øn th√¥ng b√°o
 */
export const NotificationProvider = ({ children }) => {
  const { user } = useAuth();
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [loading, setLoading] = useState(false);

  // T·∫£i danh s√°ch th√¥ng b√°o khi user thay ƒë·ªïi
  useEffect(() => {
    if (user) {
      loadNotifications();
      setupSocketListeners();

      // Set up interval ƒë·ªÉ check notifications m·ªõi m·ªói 30 gi√¢y (gi·∫£m t·∫ßn su·∫•t v√¨ c√≥ real-time)
      const interval = setInterval(() => {
        loadNotifications();
      }, 30000);

      return () => {
        clearInterval(interval);
        cleanupSocketListeners();
      };
    } else {
      setNotifications([]);
      setUnreadCount(0);
      cleanupSocketListeners();
    }
  }, [user]);

  /**
   * T·∫£i danh s√°ch th√¥ng b√°o t·ª´ storage
   */
  const loadNotifications = async () => {
    if (!user) return;

    try {
      setLoading(true);
      const userNotifications = await LocalStorage.getNotifications(user.id);
      setNotifications(userNotifications);

      // ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
      const unread = userNotifications.filter(n => !n.isRead).length;
      setUnreadCount(unread);
    } catch (error) {
      console.error('L·ªói khi t·∫£i th√¥ng b√°o:', error);
    } finally {
      setLoading(false);
    }
  };

  /**
   * ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
   * @param {string} notificationId - ID c·ªßa th√¥ng b√°o
   */
  const markAsRead = async (notificationId) => {
    try {
      await LocalStorage.markNotificationAsRead(notificationId);

      // C·∫≠p nh·∫≠t state local
      setNotifications(prev =>
        prev.map(notification =>
          notification.id === notificationId
            ? { ...notification, isRead: true }
            : notification
        )
      );

      // C·∫≠p nh·∫≠t s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
      setUnreadCount(prev => Math.max(0, prev - 1));
    } catch (error) {
      console.error('L·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc:', error);
    }
  };

  /**
   * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
   */
  const markAllAsRead = async () => {
    try {
      // ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ch∆∞a ƒë·ªçc
      const unreadNotifications = notifications.filter(n => !n.isRead);

      for (const notification of unreadNotifications) {
        await LocalStorage.markNotificationAsRead(notification.id);
      }

      // C·∫≠p nh·∫≠t state local
      setNotifications(prev =>
        prev.map(notification => ({ ...notification, isRead: true }))
      );

      setUnreadCount(0);
    } catch (error) {
      console.error('L·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc:', error);
    }
  };

  /**
   * Refresh danh s√°ch th√¥ng b√°o
   */
  const refreshNotifications = () => {
    loadNotifications();
  };

  /**
   * X√≥a m·ªôt th√¥ng b√°o
   * @param {string} notificationId - ID c·ªßa th√¥ng b√°o c·∫ßn x√≥a
   */
  const clearNotification = async (notificationId) => {
    try {
      await LocalStorage.deleteNotification(notificationId);

      // C·∫≠p nh·∫≠t state local
      setNotifications(prev => {
        const updatedNotifications = prev.filter(n => n.id !== notificationId);

        // C·∫≠p nh·∫≠t unread count
        const deletedNotification = prev.find(n => n.id === notificationId);
        if (deletedNotification && !deletedNotification.isRead) {
          setUnreadCount(prevCount => Math.max(0, prevCount - 1));
        }

        return updatedNotifications;
      });
    } catch (error) {
      console.error('L·ªói khi x√≥a th√¥ng b√°o:', error);
    }
  };

  /**
   * X√≥a t·∫•t c·∫£ th√¥ng b√°o
   */
  const clearAllNotifications = async () => {
    if (!user) return;

    try {
      await LocalStorage.clearAllNotifications(user.id);

      // C·∫≠p nh·∫≠t state local
      setNotifications([]);
      setUnreadCount(0);
    } catch (error) {
      console.error('L·ªói khi x√≥a t·∫•t c·∫£ th√¥ng b√°o:', error);
    }
  };

  // ==================== SOCKET NOTIFICATION FUNCTIONS ====================

  /**
   * Thi·∫øt l·∫≠p socket listeners cho notifications
   */
  const setupSocketListeners = () => {
    // L·∫Øng nghe notification m·ªõi t·ª´ socket
    socketService.on('new_notification', handleNewNotification);
  };

  /**
   * D·ªçn d·∫πp socket listeners
   */
  const cleanupSocketListeners = () => {
    socketService.off('new_notification', handleNewNotification);
  };

  /**
   * X·ª≠ l√Ω notification m·ªõi t·ª´ socket
   * @param {Object} notificationData - D·ªØ li·ªáu notification t·ª´ socket
   */
  const handleNewNotification = async (notificationData) => {
    try {
      console.log('Nh·∫≠n notification real-time:', notificationData);

      // L∆∞u notification v√†o local storage
      await LocalStorage.addNotification(
        user.id,
        notificationData.type,
        notificationData.message,
        notificationData.data
      );

      // C·∫≠p nh·∫≠t state ngay l·∫≠p t·ª©c
      await loadNotifications();

      // Hi·ªÉn th·ªã notification tr·ª±c ti·∫øp
      console.log(`üîî ${notificationData.message}`);

      // TODO: C√≥ th·ªÉ th√™m toast notification ho·∫∑c push notification ·ªü ƒë√¢y
      // Alert.alert('Th√¥ng b√°o m·ªõi', notificationData.message);

    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω notification real-time:', error);
    }
  };

  /**
   * Navigate tr·ª±c ti·∫øp ƒë·∫øn chi ti·∫øt notification
   * @param {Object} notification - Notification object
   */
  const navigateToNotification = async (notification) => {
    try {
      // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
      await markAsRead(notification.id);

      // Navigate d·ª±a tr√™n lo·∫°i notification
      if (notification.type === 'message') {
        // X·ª≠ l√Ω th√¥ng b√°o chat - ƒë√£ c√≥ trong NotificationScreen
        return;
      } else if (notification.data?.postId) {
        // Navigate ƒë·∫øn PostDetailScreen
        const LocalStorage = require('../services/localStorage');
        const posts = await LocalStorage.getPosts();
        const post = posts.find(p => p.id === notification.data.postId);

        if (post) {
          // TODO: Implement navigation to PostDetailScreen
          console.log('Navigate to post:', post.id);
        }
      }
    } catch (error) {
      console.error('L·ªói khi navigate notification:', error);
    }
  };

  /**
   * Th√™m th√¥ng b√°o m·ªõi (ƒë∆∞·ª£c g·ªçi t·ª´ c√°c action kh√°c)
   * @param {string} userId - ID ng∆∞·ªùi nh·∫≠n
   * @param {string} type - Lo·∫°i th√¥ng b√°o
   * @param {string} message - N·ªôi dung th√¥ng b√°o
   * @param {Object} data - D·ªØ li·ªáu b·ªï sung
   */
  const addNotification = async (userId, type, message, data = {}) => {
    try {
      await LocalStorage.addNotification(userId, type, message, data);

      // N·∫øu th√¥ng b√°o cho user hi·ªán t·∫°i, c·∫≠p nh·∫≠t state
      if (user && userId === user.id) {
        await loadNotifications();
      }
    } catch (error) {
      console.error('L·ªói khi th√™m th√¥ng b√°o:', error);
    }
  };

  // Gi√° tr·ªã context
  const contextValue = {
    notifications,
    unreadCount,
    loading,
    markAsRead,
    markAllAsRead,
    clearNotification,
    clearAllNotifications,
    refreshNotifications,
    addNotification,
    navigateToNotification
  };

  return (
    <NotificationContext.Provider value={contextValue}>
      {children}
    </NotificationContext.Provider>
  );
};

/**
 * Hook ƒë·ªÉ s·ª≠ d·ª•ng notification context
 * @returns {Object} Notification context value
 */
export const useNotifications = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotifications ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong NotificationProvider');
  }
  return context;
};

export default NotificationContext;
